<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:security="http://www.springframework.org/schema/security"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
						http://www.springframework.org/schema/security https://www.springframework.org/schema/security/spring-security.xsd">
	
	<!-- To use concurrent session support, youâ€™ll need to add HttpSessionEventPublisher listener to web.xml  -->

	<bean id="authenticationEntryPoint" class="org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint">
		<constructor-arg name="loginFormUrl" value="/auth/login" />
	</bean>
	
	<!-- jsr250 annotations -->
	<!-- RolesAllowed E.g. @RolesAllowed("ROLE_CUSTOMER") -->
	<!-- prePost annotations -->
	<!-- PreAuthorize  E.g. @PreAuthorize("hasRole('ROLE_CUSTOMER')")
		 PostAuthorize E.g. @PostAuthorize("hasRole('ROLE_ADMIN')")
		 PreFilter 	   E.g. @PreFilter("hasRole('MANAGER') or filterObject.assignee == authentication.name")")
	     PostFilter    E.g. @PostFilter("hasRole('MANAGER') or filterObject.assignee == authentication.name")") 
	-->
	<!-- secured annotations -->
	<!-- @Secured("IS_AUTHENTICATED_ANONYMOUSLY") or @Secured("ROLE_TELLER") -->
	<security:global-method-security jsr250-annotations="enabled" pre-post-annotations="enabled" secured-annotations="enabled"/>
	

	<security:http auto-config="false" use-expressions="true" entry-point-ref="authenticationEntryPoint">

		<!-- URL patterns and there access -->
		<security:intercept-url pattern="/auth/login"  access="permitAll" />
		<security:intercept-url pattern="/auth/denied" access="permitAll" />
		<security:intercept-url pattern="/main/admin"  access="hasRole('ROLE_ADMIN')" />
		<security:intercept-url pattern="/main/users"  access="hasRole('ROLE_ADMIN')" />
		<security:intercept-url pattern="/main/common" access="hasRole('ROLE_USER') or hasRole('ROLE_ADMIN')" />

		<!-- Logout settings -->
		<security:logout delete-cookies="JSESSIONID" invalidate-session="true" logout-success-url="/auth/login?logout=true" logout-url="/auth/logout" />

		<!-- Access denied due to resource access -->
		<security:access-denied-handler error-page="/auth/denied" />

		<security:csrf disabled="true" />

		<!-- Custom filters to customize the code -->
		<security:custom-filter ref="concurrencyFilter" position="CONCURRENT_SESSION_FILTER" />
		<security:custom-filter ref="authenticationFilter" position="LOGIN_PAGE_FILTER" />
		<security:session-management session-authentication-strategy-ref="sas" session-authentication-error-url="/auth/login?permittedAuthExceeds=true" invalid-session-url="/auth/login?permittedAuthExceeds=true" />
		
	</security:http>

	<!-- Below configuration is required for the authentication filter -->
	<bean id="authenticationFilter" class="org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter">
		<property name="usernameParameter" value="username" />
		<property name="passwordParameter" value="password" />
		<property name="filterProcessesUrl" value="/processlogin" />
		<property name="sessionAuthenticationStrategy" ref="sas" />
		<property name="authenticationManager" ref="authenticationManager" />
		<property name="authenticationSuccessHandler" ref="customAuthenticationSuccessHandler" />
		<property name="authenticationFailureHandler" ref="customAuthenticationFailureHandler" />
	</bean>

	<bean id="customAuthenticationSuccessHandler" class="org.springframework.security.web.authentication.SavedRequestAwareAuthenticationSuccessHandler">
		<property name="defaultTargetUrl" value="/main/common" />
	</bean>

	<bean id="customAuthenticationFailureHandler" class="org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler">
		<property name="defaultFailureUrl" value="/auth/login?error=true" />
	</bean>

	<!-- Authentication provider who is responsible for loading user and there authorities -->
	<security:authentication-manager id="authenticationManager">
		<security:authentication-provider user-service-ref="customeUserDetailsServiceRef">
			<security:password-encoder ref="passwordEncoder" />
		</security:authentication-provider>
	</security:authentication-manager>

	<bean id="passwordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder">
		<constructor-arg name="strength" value="15" />
	</bean>

	<!-- In memory user details service -->
	<security:user-service id="customeUserDetailsServiceRef">
		<security:user name="user" password="$2y$15$C.24kQC4YZZAG5a5YGH18ezMPjVRLx2bwCiXPmVP04Vdq7ZVpuxnO" authorities="ROLE_USER" />
		<security:user name="admin" password="$2y$15$hKQ5E5yGQpu2KlkM4dREce8tm28bQvJ8HeIXq3Uuku1vgej9eAcpm" authorities="ROLE_ADMIN" />
	</security:user-service>
	
	<!-- below thing is required for concurrencyFilter -->

	<bean id="concurrencyFilter"
		class="org.springframework.security.web.session.ConcurrentSessionFilter">
		<constructor-arg name="sessionRegistry" ref="sessionRegistry" />
		<constructor-arg name="sessionInformationExpiredStrategy" ref="redirectSessionInformationExpiredStrategy" />
	</bean>

	<bean id="redirectSessionInformationExpiredStrategy" class="org.springframework.security.web.session.SimpleRedirectSessionInformationExpiredStrategy">
		<constructor-arg name="invalidSessionUrl" value="/auth/login?sessionexpired=true" />
	</bean>	

	<bean id="sas" class="org.springframework.security.web.authentication.session.CompositeSessionAuthenticationStrategy">
		<constructor-arg>
			<list>
				<bean class="org.springframework.security.web.authentication.session.ConcurrentSessionControlAuthenticationStrategy">
					<constructor-arg ref="sessionRegistry" />
					<property name="maximumSessions" value="1" />
					<property name="exceptionIfMaximumExceeded" value="true" />
				</bean>
				<bean class="org.springframework.security.web.authentication.session.SessionFixationProtectionStrategy"/>
				<bean class="org.springframework.security.web.authentication.session.RegisterSessionAuthenticationStrategy">
					<constructor-arg ref="sessionRegistry" />
				</bean>
			</list>
		</constructor-arg>
	</bean>
	
	<bean id="sessionRegistry" class="org.springframework.security.core.session.SessionRegistryImpl" />

</beans>